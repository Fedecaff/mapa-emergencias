import { Server } from 'socket.io';

class WebSocketService {
    constructor() {
        this.io = null;
        this.connectedUsers = new Map(); // userId -> socketId
    }

    initialize(server) {
        this.io = new Server(server, {
            cors: {
                origin: "*",
                methods: ["GET", "POST"]
            }
        });

        this.setupEventHandlers();
        console.log('‚úÖ WebSocket service inicializado');
    }

    setupEventHandlers() {
        this.io.on('connection', (socket) => {
            console.log('üîå Usuario conectado:', socket.id);

            // Usuario se autentica
            socket.on('authenticate', (userData) => {
                try {
                    const { userId, rol } = userData;
                    
                    // Guardar conexi√≥n del usuario
                    this.connectedUsers.set(userId, socket.id);
                    
                    // Unir a sala seg√∫n rol
                    socket.join(rol);
                    socket.join(`user_${userId}`);
                    
                    console.log(`‚úÖ Usuario ${userId} (${rol}) autenticado en WebSocket`);
                    
                    // Confirmar autenticaci√≥n
                    socket.emit('authenticated', { success: true });
                } catch (error) {
                    console.error('‚ùå Error en autenticaci√≥n WebSocket:', error);
                }
            });

            // Usuario se desconecta
            socket.on('disconnect', () => {
                try {
                    console.log('üîå Usuario desconectado:', socket.id);
                    
                    // Remover de usuarios conectados
                    for (const [userId, socketId] of this.connectedUsers.entries()) {
                        if (socketId === socket.id) {
                            this.connectedUsers.delete(userId);
                            console.log(`‚úÖ Usuario ${userId} removido de conexiones`);
                            break;
                        }
                    }
                } catch (error) {
                    console.error('‚ùå Error en desconexi√≥n WebSocket:', error);
                }
            });

            // Marcar notificaci√≥n como le√≠da
            socket.on('markNotificationRead', (notificationId) => {
                // Aqu√≠ implementaremos la l√≥gica para marcar como le√≠da
                console.log(`üìñ Notificaci√≥n ${notificationId} marcada como le√≠da`);
            });
        });
    }

    // Enviar notificaci√≥n de alerta a todos los usuarios excepto al creador
    sendAlertNotification(alertData, creatorId) {
        try {
            const notification = {
                id: Date.now(),
                type: 'alert',
                title: alertData.title || 'üö® Nueva Alerta',
                message: alertData.message || alertData.descripcion || 'Sin descripci√≥n',
                location: alertData.location || alertData.ubicacion || 'Sin direcci√≥n',
                category: alertData.category || alertData.categoria || 'Media',
                timestamp: new Date().toISOString(),
                alertId: alertData.alertId || alertData.id,
                latitud: alertData.latitud,
                longitud: alertData.longitud
            };

            // Enviar a todos los usuarios conectados excepto al creador
            let sentCount = 0;
            this.io.sockets.sockets.forEach((socket, socketId) => {
                try {
                    const socketUserId = this.getUserIdBySocketId(socketId);
                    if (socketUserId && socketUserId !== creatorId) {
                        socket.emit('newAlert', notification);
                        sentCount++;
                        console.log(`üì¢ Notificaci√≥n enviada a usuario ${socketUserId}`);
                    }
                } catch (socketError) {
                    console.warn(`‚ö†Ô∏è Error enviando notificaci√≥n a socket ${socketId}:`, socketError);
                }
            });
            
            console.log(`üì¢ Notificaci√≥n de alerta enviada a ${sentCount} usuarios (excepto creador ${creatorId})`);
            
            return notification;
        } catch (error) {
            console.error('‚ùå Error en sendAlertNotification:', error);
            throw error;
        }
    }

    // Obtener userId por socketId
    getUserIdBySocketId(socketId) {
        for (const [userId, id] of this.connectedUsers.entries()) {
            if (id === socketId) {
                return userId;
            }
        }
        return null;
    }

    // Enviar notificaci√≥n espec√≠fica a un usuario
    sendNotificationToUser(userId, notification) {
        const socketId = this.connectedUsers.get(userId);
        if (socketId) {
            this.io.to(socketId).emit('notification', notification);
            console.log(`üì¢ Notificaci√≥n enviada a usuario ${userId}`);
            return true;
        } else {
            console.log(`‚ö†Ô∏è Usuario ${userId} no est√° conectado`);
            return false;
        }
    }

    // Enviar notificaci√≥n a todos los usuarios de un rol espec√≠fico
    sendNotificationToRole(role, notification, excludeUserId = null) {
        if (excludeUserId) {
            // Enviar a todos excepto al usuario excluido
            this.io.to(role).emit('notification', notification);
            console.log(`üì¢ Notificaci√≥n enviada a rol ${role} (excepto usuario ${excludeUserId})`);
        } else {
            this.io.to(role).emit('notification', notification);
            console.log(`üì¢ Notificaci√≥n enviada a rol ${role}`);
        }
    }

    // Obtener usuarios conectados
    getConnectedUsers() {
        return Array.from(this.connectedUsers.keys());
    }

    // Verificar si un usuario est√° conectado
    isUserConnected(userId) {
        return this.connectedUsers.has(userId);
    }

    // Enviar notificaci√≥n de alerta eliminada a todos los usuarios excepto al que elimina
    sendAlertDeletedNotification(notificationData, excludeUserId = null) {
        const notification = {
            id: Date.now(),
            type: 'alertDeleted',
            title: notificationData.title,
            message: notificationData.message,
            alertId: notificationData.alertId,
            timestamp: new Date().toISOString()
        };

        if (excludeUserId) {
            // Enviar a todos los usuarios conectados excepto al que elimina
            let sentCount = 0;
            this.io.sockets.sockets.forEach((socket, socketId) => {
                try {
                    const socketUserId = this.getUserIdBySocketId(socketId);
                    if (socketUserId && socketUserId !== excludeUserId) {
                        socket.emit('alertDeleted', notification);
                        sentCount++;
                    }
                } catch (socketError) {
                    console.warn(`‚ö†Ô∏è Error enviando notificaci√≥n de eliminaci√≥n a socket ${socketId}:`, socketError);
                }
            });
            
            console.log(`üì¢ Notificaci√≥n de alerta eliminada enviada a ${sentCount} usuarios (excepto usuario ${excludeUserId})`);
        } else {
            // Enviar a todos los usuarios conectados
            this.io.emit('alertDeleted', notification);
            console.log(`üì¢ Notificaci√≥n de alerta eliminada enviada a todos los usuarios`);
        }
        
        return notification;
    }
}

export default new WebSocketService();
